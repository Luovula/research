import numpy as np
import scipy.stats

# Sample data
data = np.array([13.0, 12.0, 14.0, 9.0, 12.0, 11.0, 11.0, 11.0, 14.0, 11.0, 11.0, 9.0, 13.0, 14.0, 11.0, 13.0, 12.0, 14.0, 10.0, 10.0, 9.0, 14.0, 9.0, 11.0, 12.0, 13.0, 12.0, 11.0, 12.0, 12.0, 11.0, 12.0, 9.0, 10.0, 11.0, 11.0, 11.0, 13.0, 14.0, 11.0, 14.0, 14.0, 14.0, 14.0, 10.0, 11.0, 8.0, 10.0, 11.0, 10.0, 11.0, 10.0, 9.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 12.0, 13.0, 12.0, 13.0, 11.0, 14.0, 13.0, 9.0, 8.0, 8.0, 9.0, 8.0, 6.0, 7.0, 13.0, 14.0, 13.0, 14.0, 7.0, 8.0, 14.0, 11.0, 11.0, 10.0, 10.0, 12.0, 12.0, 9.0, 12.0, 9.0, 11.0, 8.0, 8.0, 8.0, 9.0, 8.0, 7.0, 7.0, 14.0, 13.0, 12.0, 14.0, 7.0, 7.0, 12.0, 10.0, 11.0, 10.0, 10.0, 12.0, 12.0, 10.0, 12.0, 9.0, 10.0, 10.0, 12.0, 13.0, 11.0, 13.0, 13.0, 12.0, 13.0, 13.0, 14.0, 11.0, 9.0, 10.0, 9.0, 10.0, 10.0, 12.0, 11.0, 13.0, 11.0, 14.0, 11.0, 11.0, 13.0, 10.0, 13.0, 9.0, 12.0, 9.0, 12.0, 11.0, 12.0, 10.0, 14.0, 9.0, 9.0, 11.0, 14.0, 12.0, 11.0, 7.0, 11.0, 14.0, 8.0, 9.0, 7.0, 6.0, 10.0, 10.0, 6.0, 12.0, 11.0, 9.0, 14.0, 8.0, 11.0, 8.0, 8.0, 12.0, 7.0, 12.0, 11.0, 11.0, 8.0, 10.0, 14.0, 12.0, 11.0, 9.0, 13.0, 10.0, 13.0, 9.0, 11.0, 11.0, 13.0, 14.0, 14.0, 13.0, 14.0, 14.0, 14.0, 13.0, 13.0, 11.0, 13.0, 11.0, 12.0, 11.0, 12.0, 9.0, 8.0, 10.0, 12.0, 9.0, 8.0, 9.0, 9.0, 8.0, 8.0, 12.0, 7.0, 7.0, 8.0, 6.0, 13.0, 6.0, 12.0, 14.0, 12.0, 11.0, 12.0, 10.0, 13.0, 13.0, 13.0, 12.0, 14.0, 14.0, 12.0, 11.0, 13.0, 13.0, 12.0, 11.0, 12.0, 11.0, 14.0, 10.0, 11.0, 12.0, 11.0, 12.0, 14.0, 11.0, 13.0, 12.0, 11.0, 14.0, 11.0, 12.0, 12.0, 12.0, 11.0, 14.0, 11.0, 13.0, 9.0, 14.0, 9.0, 12.0, 11.0, 14.0, 13.0, 13.0, 11.0, 11.0, 9.0, 10.0, 9.0, 10.0, 9.0, 14.0, 10.0, 10.0, 12.0, 13.0, 10.0, 13.0, 10.0, 13.0, 9.0, 11.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.0, 10.0, 10.0, 10.0, 8.0, 9.0, 8.0, 9.0, 7.0, 6.0, 6.0, 14.0, 12.0, 13.0, 13.0, 10.0, 13.0, 14.0, 11.0, 12.0, 10.0, 12.0, 11.0, 10.0, 11.0, 10.0, 12.0, 11.0, 10.0, 8.0, 10.0, 9.0, 10.0, 8.0, 12.0, 9.0, 13.0, 10.0, 12.0, 8.0, 12.0, 7.0, 9.0, 12.0, 13.0, 12.0, 6.0, 13.0, 8.0, 10.0, 9.0, 11.0, 6.0, 13.0, 9.0, 8.0, 6.0, 8.0, 5.0, 10.0, 6.0, 7.0, 5.0, 10.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 11.0, 6.0, 6.0, 7.0, 5.0, 6.0, 5.0, 5.0, 5.0, 6.0, 4.0, 5.0, 6.0, 5.0, 6.0, 5.0, 4.0, 12.0, 4.0, 4.0, 4.0, 4.0, 5.0, 12.0, 14.0, 13.0, 12.0, 12.0, 13.0, 14.0, 12.0, 11.0, 11.0, 12.0, 13.0, 13.0, 11.0, 11.0, 13.0, 9.0, 9.0, 8.0, 7.0, 14.0, 6.0, 9.0, 7.0, 7.0, 8.0, 7.0, 10.0, 12.0, 14.0, 13.0, 13.0, 12.0, 13.0, 14.0, 12.0, 14.0, 14.0, 14.0, 13.0, 12.0, 13.0, 14.0, 14.0, 14.0, 12.0, 12.0, 12.0, 13.0, 14.0, 10.0, 13.0, 12.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 10.0, 14.0, 11.0, 12.0, 13.0, 14.0, 13.0, 14.0, 14.0, 11.0, 13.0, 12.0, 12.0, 12.0, 13.0, 14.0, 12.0, 8.0, 10.0, 9.0, 11.0, 8.0, 10.0, 9.0, 10.0, 13.0, 11.0, 11.0, 10.0, 12.0, 13.0, 13.0, 13.0, 12.0, 14.0, 13.0, 14.0, 11.0, 11.0, 12.0, 11.0, 12.0, 14.0, 14.0, 14.0, 12.0, 14.0, 14.0, 10.0, 11.0, 8.0, 10.0, 9.0, 8.0, 11.0, 9.0, 9.0, 11.0, 11.0, 12.0, 11.0, 11.0, 11.0, 11.0, 10.0, 11.0, 11.0, 12.0, 12.0, 12.0, 11.0, 11.0, 13.0, 12.0, 12.0, 13.0, 13.0, 12.0, 13.0, 10.0, 13.0, 11.0, 14.0, 11.0, 10.0, 9.0, 12.0, 9.0, 13.0, 10.0, 13.0, 12.0, 14.0, 14.0, 11.0, 14.0, 12.0, 11.0, 14.0, 12.0, 14.0, 12.0, 11.0, 10.0, 13.0, 11.0, 13.0, 12.0, 13.0, 13.0, 11.0, 11.0, 10.0, 9.0, 12.0, 8.0, 11.0, 11.0, 11.0, 8.0, 14.0, 11.0, 12.0, 12.0, 11.0, 11.0, 10.0, 11.0, 11.0, 14.0, 13.0, 13.0, 12.0, 12.0, 12.0, 8.0, 9.0, 12.0, 9.0, 8.0, 14.0, 8.0, 8.0, 8.0, 8.0, 9.0, 13.0, 9.0, 13.0, 13.0, 14.0, 7.0, 13.0, 14.0, 11.0, 10.0, 9.0, 14.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 12.0, 9.0, 9.0, 10.0, 11.0, 10.0, 10.0, 10.0, 12.0, 14.0, 12.0, 10.0, 8.0, 8.0, 7.0, 9.0, 7.0, 7.0, 5.0, 6.0, 6.0, 6.0, 7.0, 11.0, 8.0, 12.0, 9.0, 13.0, 13.0, 11.0, 12.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 14.0, 13.0, 13.0, 13.0, 13.0, 14.0, 13.0, 13.0, 13.0, 13.0, 10.0, 11.0, 9.0, 10.0, 8.0, 10.0, 8.0, 7.0, 9.0, 13.0, 9.0, 10.0, 7.0, 8.0, 8.0, 8.0, 10.0, 10.0, 10.0, 9.0, 9.0, 9.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 7.0, 6.0, 13.0, 13.0, 12.0, 11.0, 13.0, 14.0, 11.0, 10.0, 11.0, 14.0, 13.0, 10.0, 13.0, 12.0, 13.0, 11.0, 12.0, 12.0, 14.0, 10.0, 14.0, 9.0, 9.0, 11.0, 11.0, 13.0, 12.0, 12.0, 11.0, 11.0, 11.0, 11.0, 12.0, 11.0, 12.0, 10.0, 12.0, 13.0, 10.0, 12.0, 9.0, 12.0, 9.0, 13.0, 7.0, 11.0, 8.0, 12.0, 11.0, 10.0, 10.0, 13.0, 9.0, 8.0, 11.0])
print(len(data))
# Calculate the sample mean (estimate for Î»)
mean = np.mean(data)

# Set the desired confidence level (e.g., 0.95 for a 95% prediction interval)
confidence_level = 0.90

# Calculate the lower and upper tails
lower_tail = (1 - confidence_level) / 2
upper_tail = 1 - lower_tail

# Calculate the lower and upper bounds using the Poisson PPF
lower_bound = scipy.stats.poisson.ppf(lower_tail, mean)
upper_bound = scipy.stats.poisson.ppf(upper_tail, mean)

print(f"The {confidence_level * 100}% prediction interval is ({lower_bound}, {upper_bound})")
