import numpy as np
from scipy.stats import kruskal

# Replace 'opening_values', 'middle_values', and 'end_values' with your actual data arrays
opening_values = np.array([12.0, 13.0, 12.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 14.0, 13.0, 12.0, 13.0, 12.0, 12.0, 11.0, 12.0, 12.0, 14.0, 14.0, 14.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 12.0, 14.0, 13.0, 13.0, 12.0, 11.0, 12.0, 11.0, 12.0, 11.0, 12.0, 14.0, 12.0, 12.0, 12.0, 13.0, 13.0, 12.0, 12.0, 14.0, 14.0, 12.0, 12.0, 12.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 14.0, 12.0, 12.0, 12.0, 13.0, 13.0, 12.0, 14.0, 13.0, 14.0, 14.0, 14.0, 13.0, 12.0, 13.0, 12.0, 13.0, 12.0, 13.0, 13.0, 14.0, 13.0, 13.0, 9.0, 13.0, 11.0, 11.0, 8.0, 8.0, 12.0, 14.0, 7.0, 10.0, 8.0, 12.0, 12.0, 10.0, 13.0, 13.0, 14.0, 8.0, 10.0, 8.0, 14.0, 8.0, 8.0, 6.0, 6.0, 6.0, 13.0, 6.0, 8.0, 6.0, 9.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 10.0, 13.0, 11.0, 13.0, 13.0, 13.0, 14.0, 14.0, 13.0, 13.0, 12.0, 11.0, 11.0, 11.0, 11.0, 11.0, 14.0, 14.0, 14.0, 12.0, 11.0, 14.0, 12.0, 11.0, 13.0, 10.0, 12.0, 13.0, 12.0, 12.0, 12.0, 11.0, 11.0, 12.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 11.0, 12.0, 12.0, 11.0, 13.0, 11.0, 12.0, 12.0, 12.0, 13.0, 13.0, 12.0, 11.0, 12.0, 13.0, 14.0, 14.0, 14.0, 12.0, 11.0, 13.0, 14.0, 10.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 11.0, 11.0, 13.0, 14.0, 14.0, 14.0, 12.0, 12.0, 11.0, 13.0, 11.0, 12.0, 11.0, 12.0, 11.0, 14.0, 12.0, 12.0, 12.0, 14.0, 12.0, 12.0, 13.0, 11.0, 12.0, 11.0, 12.0, 10.0, 12.0, 10.0, 12.0, 12.0, 12.0, 11.0, 13.0, 12.0, 13.0, 13.0, 13.0, 11.0, 12.0, 11.0, 11.0, 12.0, 11.0, 12.0, 10.0, 13.0, 12.0, 11.0, 12.0, 11.0, 10.0, 10.0, 10.0, 11.0, 9.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 11.0, 11.0, 13.0, 11.0, 11.0, 11.0, 12.0, 11.0, 12.0, 12.0, 11.0, 12.0, 10.0, 11.0, 10.0, 10.0, 11.0, 11.0, 9.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 14.0, 11.0, 13.0, 11.0, 11.0, 13.0, 12.0, 13.0, 11.0, 13.0, 14.0, 14.0, 12.0, 12.0, 11.0, 11.0, 12.0, 11.0, 11.0, 11.0, 12.0, 11.0, 13.0, 11.0, 13.0, 11.0, 11.0, 13.0, 12.0, 13.0, 13.0, 13.0, 11.0, 11.0, 11.0, 11.0, 13.0, 12.0, 13.0, 13.0, 12.0, 10.0, 12.0, 11.0, 13.0, 11.0, 13.0, 11.0, 12.0, 12.0, 13.0, 11.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 11.0, 12.0, 11.0, 11.0, 11.0, 13.0, 11.0, 14.0, 13.0, 14.0, 13.0, 12.0, 13.0, 13.0, 12.0, 11.0, 11.0, 12.0, 12.0, 12.0, 11.0, 10.0, 11.0, 12.0, 10.0, 14.0, 13.0, 11.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 13.0, 12.0, 12.0, 11.0, 11.0, 10.0, 13.0, 11.0, 12.0, 10.0, 13.0, 10.0, 12.0, 11.0, 11.0, 12.0, 11.0, 13.0, 13.0, 12.0, 14.0, 14.0, 12.0, 12.0, 12.0, 11.0, 13.0, 14.0, 12.0, 11.0, 13.0, 12.0, 13.0, 11.0, 13.0, 11.0, 12.0, 11.0, 11.0, 11.0, 13.0, 12.0, 12.0, 11.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 13.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 11.0, 12.0, 13.0, 11.0, 10.0, 10.0, 11.0, 11.0, 12.0, 12.0, 11.0, 11.0, 11.0, 11.0, 13.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 12.0, 12.0, 10.0, 11.0, 10.0, 11.0, 13.0, 13.0, 12.0, 13.0, 13.0, 14.0, 12.0, 12.0, 12.0, 11.0, 12.0, 13.0, 13.0, 13.0, 13.0, 12.0, 13.0, 13.0, 10.0, 12.0, 10.0, 12.0, 10.0, 10.0, 10.0, 11.0, 13.0, 13.0, 14.0, 10.0, 12.0, 12.0, 13.0, 13.0, 11.0, 12.0, 13.0, 13.0, 12.0, 12.0, 14.0, 13.0, 13.0, 13.0, 12.0, 12.0, 12.0, 13.0, 14.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 11.0, 12.0, 11.0, 12.0, 11.0, 11.0, 12.0, 11.0, 12.0, 11.0, 10.0, 14.0, 11.0, 11.0, 12.0, 11.0, 11.0, 13.0, 10.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 11.0, 11.0, 13.0, 12.0, 12.0, 11.0, 13.0, 14.0, 13.0, 12.0, 12.0, 11.0, 12.0, 11.0, 13.0, 12.0, 13.0, 11.0, 14.0, 13.0, 13.0, 12.0, 14.0, 12.0, 13.0, 13.0, 12.0, 12.0, 11.0, 12.0, 12.0, 11.0, 12.0, 11.0, 12.0, 11.0, 13.0, 13.0, 13.0, 10.0, 10.0, 11.0, 12.0, 13.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 11.0, 13.0, 13.0, 13.0, 14.0, 12.0, 12.0, 14.0, 12.0, 11.0, 12.0, 11.0, 11.0, 11.0, 10.0, 11.0, 12.0, 14.0, 11.0, 12.0, 10.0, 10.0, 10.0, 11.0, 12.0, 12.0, 12.0, 11.0, 13.0, 12.0, 13.0, 11.0, 13.0, 12.0, 12.0, 13.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 12.0, 12.0, 11.0, 12.0, 13.0, 12.0, 14.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 11.0, 10.0, 11.0, 10.0, 12.0, 10.0, 12.0, 10.0, 11.0, 11.0, 12.0, 12.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 10.0, 12.0, 12.0, 14.0, 13.0, 13.0, 13.0, 12.0, 14.0, 12.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 12.0, 13.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 13.0, 12.0, 12.0, 14.0, 13.0, 14.0, 12.0, 12.0, 12.0, 11.0, 11.0, 10.0, 11.0, 11.0, 12.0, 11.0, 12.0, 11.0, 13.0, 12.0, 13.0, 13.0, 12.0, 14.0, 13.0, 14.0, 12.0, 13.0, 14.0, 13.0, 13.0, 14.0, 12.0, 12.0, 12.0, 12.0, 11.0, 11.0, 11.0, 12.0, 11.0, 11.0, 10.0, 11.0, 10.0, 14.0, 13.0, 14.0, 13.0, 13.0, 13.0, 12.0, 13.0, 14.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 14.0, 12.0, 11.0, 11.0, 11.0, 11.0, 13.0, 13.0, 13.0, 10.0, 13.0, 14.0, 14.0, 11.0, 12.0, 12.0, 10.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 12.0, 10.0, 11.0, 13.0, 10.0, 13.0, 11.0, 12.0, 12.0, 12.0, 11.0, 12.0, 12.0, 13.0, 11.0, 10.0, 12.0, 10.0, 11.0, 11.0, 11.0, 12.0, 10.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 12.0, 11.0, 11.0, 11.0, 11.0, 13.0, 12.0, 12.0, 13.0, 11.0, 14.0, 13.0, 13.0, 13.0, 12.0, 13.0, 12.0, 13.0, 14.0, 12.0, 14.0, 11.0, 12.0, 12.0, 12.0, 12.0, 13.0, 12.0, 12.0, 13.0, 14.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 12.0, 12.0, 12.0, 12.0, 11.0, 11.0, 14.0, 11.0, 12.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 11.0, 11.0, 12.0, 11.0, 12.0, 10.0, 14.0, 10.0, 12.0, 13.0, 13.0, 10.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 14.0, 11.0, 12.0, 11.0, 11.0, 11.0, 11.0, 13.0, 12.0, 12.0, 11.0, 10.0, 11.0, 10.0, 11.0, 10.0, 12.0, 10.0, 12.0, 10.0, 12.0, 11.0, 13.0, 13.0, 11.0, 14.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 11.0, 11.0, 11.0, 11.0, 12.0, 11.0, 12.0, 12.0, 12.0, 14.0, 14.0, 12.0, 12.0, 11.0, 12.0, 10.0, 11.0, 11.0, 13.0, 12.0, 10.0, 12.0, 12.0, 12.0, 10.0, 10.0, 11.0, 12.0, 11.0, 13.0, 12.0, 14.0, 11.0, 11.0, 12.0, 12.0, 11.0, 12.0, 13.0, 12.0, 12.0, 13.0, 11.0, 13.0, 14.0, 11.0, 12.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 10.0, 12.0, 11.0, 11.0, 11.0, 12.0, 11.0, 11.0, 13.0, 12.0, 12.0, 12.0, 14.0, 12.0, 12.0, 14.0, 12.0, 12.0, 12.0, 12.0, 14.0, 11.0, 10.0, 10.0, 11.0, 13.0, 12.0, 13.0, 11.0, 12.0, 13.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 11.0, 11.0, 12.0, 11.0, 12.0, 11.0, 13.0, 11.0, 13.0, 12.0, 12.0, 13.0, 13.0, 13.0, 11.0, 10.0, 12.0, 12.0, 11.0, 11.0, 10.0, 11.0, 11.0, 12.0, 12.0, 12.0, 10.0, 10.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 12.0, 11.0, 11.0, 11.0, 11.0, 12.0, 11.0, 10.0, 14.0, 13.0, 14.0, 13.0, 13.0, 11.0, 13.0, 12.0])
middle_values = np.array([13.0, 12.0, 14.0, 9.0, 12.0, 11.0, 11.0, 11.0, 14.0, 11.0, 11.0, 9.0, 13.0, 14.0, 11.0, 13.0, 12.0, 14.0, 10.0, 10.0, 9.0, 14.0, 9.0, 11.0, 12.0, 13.0, 12.0, 11.0, 12.0, 12.0, 11.0, 12.0, 9.0, 10.0, 11.0, 11.0, 11.0, 13.0, 14.0, 11.0, 14.0, 14.0, 14.0, 14.0, 10.0, 11.0, 8.0, 10.0, 11.0, 10.0, 11.0, 10.0, 9.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 12.0, 13.0, 12.0, 13.0, 11.0, 14.0, 13.0, 9.0, 8.0, 8.0, 9.0, 8.0, 6.0, 7.0, 13.0, 14.0, 13.0, 14.0, 7.0, 8.0, 14.0, 11.0, 11.0, 10.0, 10.0, 12.0, 12.0, 9.0, 12.0, 9.0, 11.0, 8.0, 8.0, 8.0, 9.0, 8.0, 7.0, 7.0, 14.0, 13.0, 12.0, 14.0, 7.0, 7.0, 12.0, 10.0, 11.0, 10.0, 10.0, 12.0, 12.0, 10.0, 12.0, 9.0, 10.0, 10.0, 12.0, 13.0, 11.0, 13.0, 13.0, 12.0, 13.0, 13.0, 14.0, 11.0, 9.0, 10.0, 9.0, 10.0, 10.0, 12.0, 11.0, 13.0, 11.0, 14.0, 11.0, 11.0, 13.0, 10.0, 13.0, 9.0, 12.0, 9.0, 12.0, 11.0, 12.0, 10.0, 14.0, 9.0, 9.0, 11.0, 14.0, 12.0, 11.0, 7.0, 11.0, 14.0, 8.0, 9.0, 7.0, 6.0, 10.0, 10.0, 6.0, 12.0, 11.0, 9.0, 14.0, 8.0, 11.0, 8.0, 8.0, 12.0, 7.0, 12.0, 11.0, 11.0, 8.0, 10.0, 14.0, 12.0, 11.0, 9.0, 13.0, 10.0, 13.0, 9.0, 11.0, 11.0, 13.0, 14.0, 14.0, 13.0, 14.0, 14.0, 14.0, 13.0, 13.0, 11.0, 13.0, 11.0, 12.0, 11.0, 12.0, 9.0, 8.0, 10.0, 12.0, 9.0, 8.0, 9.0, 9.0, 8.0, 8.0, 12.0, 7.0, 7.0, 8.0, 6.0, 13.0, 6.0, 12.0, 14.0, 12.0, 11.0, 12.0, 10.0, 13.0, 13.0, 13.0, 12.0, 14.0, 14.0, 12.0, 11.0, 13.0, 13.0, 12.0, 11.0, 12.0, 11.0, 14.0, 10.0, 11.0, 12.0, 11.0, 12.0, 14.0, 11.0, 13.0, 12.0, 11.0, 14.0, 11.0, 12.0, 12.0, 12.0, 11.0, 14.0, 11.0, 13.0, 9.0, 14.0, 9.0, 12.0, 11.0, 14.0, 13.0, 13.0, 11.0, 11.0, 9.0, 10.0, 9.0, 10.0, 9.0, 14.0, 10.0, 10.0, 12.0, 13.0, 10.0, 13.0, 10.0, 13.0, 9.0, 11.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.0, 10.0, 10.0, 10.0, 8.0, 9.0, 8.0, 9.0, 7.0, 6.0, 6.0, 14.0, 12.0, 13.0, 13.0, 10.0, 13.0, 14.0, 11.0, 12.0, 10.0, 12.0, 11.0, 10.0, 11.0, 10.0, 12.0, 11.0, 10.0, 8.0, 10.0, 9.0, 10.0, 8.0, 12.0, 9.0, 13.0, 10.0, 12.0, 8.0, 12.0, 7.0, 9.0, 12.0, 13.0, 12.0, 6.0, 13.0, 8.0, 10.0, 9.0, 11.0, 6.0, 13.0, 9.0, 8.0, 6.0, 8.0, 5.0, 10.0, 6.0, 7.0, 5.0, 10.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 11.0, 6.0, 6.0, 7.0, 5.0, 6.0, 5.0, 5.0, 5.0, 6.0, 4.0, 5.0, 6.0, 5.0, 6.0, 5.0, 4.0, 12.0, 4.0, 4.0, 4.0, 4.0, 5.0, 12.0, 14.0, 13.0, 12.0, 12.0, 13.0, 14.0, 12.0, 11.0, 11.0, 12.0, 13.0, 13.0, 11.0, 11.0, 13.0, 9.0, 9.0, 8.0, 7.0, 14.0, 6.0, 9.0, 7.0, 7.0, 8.0, 7.0, 10.0, 12.0, 14.0, 13.0, 13.0, 12.0, 13.0, 14.0, 12.0, 14.0, 14.0, 14.0, 13.0, 12.0, 13.0, 14.0, 14.0, 14.0, 12.0, 12.0, 12.0, 13.0, 14.0, 10.0, 13.0, 12.0, 13.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 11.0, 12.0, 10.0, 14.0, 11.0, 12.0, 13.0, 14.0, 13.0, 14.0, 14.0, 11.0, 13.0, 12.0, 12.0, 12.0, 13.0, 14.0, 12.0, 8.0, 10.0, 9.0, 11.0, 8.0, 10.0, 9.0, 10.0, 13.0, 11.0, 11.0, 10.0, 12.0, 13.0, 13.0, 13.0, 12.0, 14.0, 13.0, 14.0, 11.0, 11.0, 12.0, 11.0, 12.0, 14.0, 14.0, 14.0, 12.0, 14.0, 14.0, 10.0, 11.0, 8.0, 10.0, 9.0, 8.0, 11.0, 9.0, 9.0, 11.0, 11.0, 12.0, 11.0, 11.0, 11.0, 11.0, 10.0, 11.0, 11.0, 12.0, 12.0, 12.0, 11.0, 11.0, 13.0, 12.0, 12.0, 13.0, 13.0, 12.0, 13.0, 10.0, 13.0, 11.0, 14.0, 11.0, 10.0, 9.0, 12.0, 9.0, 13.0, 10.0, 13.0, 12.0, 14.0, 14.0, 11.0, 14.0, 12.0, 11.0, 14.0, 12.0, 14.0, 12.0, 11.0, 10.0, 13.0, 11.0, 13.0, 12.0, 13.0, 13.0, 11.0, 11.0, 10.0, 9.0, 12.0, 8.0, 11.0, 11.0, 11.0, 8.0, 14.0, 11.0, 12.0, 12.0, 11.0, 11.0, 10.0, 11.0, 11.0, 14.0, 13.0, 13.0, 12.0, 12.0, 12.0, 8.0, 9.0, 12.0, 9.0, 8.0, 14.0, 8.0, 8.0, 8.0, 8.0, 9.0, 13.0, 9.0, 13.0, 13.0, 14.0, 7.0, 13.0, 14.0, 11.0, 10.0, 9.0, 14.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 12.0, 9.0, 9.0, 10.0, 11.0, 10.0, 10.0, 10.0, 12.0, 14.0, 12.0, 10.0, 8.0, 8.0, 7.0, 9.0, 7.0, 7.0, 5.0, 6.0, 6.0, 6.0, 7.0, 11.0, 8.0, 12.0, 9.0, 13.0, 13.0, 11.0, 12.0, 12.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 14.0, 13.0, 13.0, 13.0, 13.0, 14.0, 13.0, 13.0, 13.0, 13.0, 10.0, 11.0, 9.0, 10.0, 8.0, 10.0, 8.0, 7.0, 9.0, 13.0, 9.0, 10.0, 7.0, 8.0, 8.0, 8.0, 10.0, 10.0, 10.0, 9.0, 9.0, 9.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 7.0, 6.0, 13.0, 13.0, 12.0, 11.0, 13.0, 14.0, 11.0, 10.0, 11.0, 14.0, 13.0, 10.0, 13.0, 12.0, 13.0, 11.0, 12.0, 12.0, 14.0, 10.0, 14.0, 9.0, 9.0, 11.0, 11.0, 13.0, 12.0, 12.0, 11.0, 11.0, 11.0, 11.0, 12.0, 11.0, 12.0, 10.0, 12.0, 13.0, 10.0, 12.0, 9.0, 12.0, 9.0, 13.0, 7.0, 11.0, 8.0, 12.0, 11.0, 10.0, 10.0, 13.0, 9.0, 8.0, 11.0])
end_values = np.array([8.0, 9.0, 9.0, 5.0, 5.0, 5.0, 6.0, 5.0, 7.0, 5.0, 8.0, 4.0, 9.0, 6.0, 8.0, 6.0, 4.0, 4.0, 7.0, 5.0, 5.0, 6.0, 4.0, 5.0, 3.0, 6.0, 4.0, 4.0, 4.0, 9.0, 3.0, 3.0, 2.0, 3.0, 5.0, 2.0, 2.0, 3.0, 5.0, 2.0, 2.0, 4.0, 2.0, 3.0, 3.0, 9.0, 3.0, 7.0, 7.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 6.0, 7.0, 6.0, 9.0, 2.0, 1.0, 2.0, 6.0, 2.0, 2.0, 2.0, 7.0, 2.0, 2.0, 5.0, 2.0, 2.0, 3.0, 2.0, 2.0, 1.0, 9.0, 1.0, 9.0, 9.0, 9.0, 4.0, 5.0, 9.0, 9.0, 1.0, 6.0, 4.0, 4.0, 1.0, 9.0, 6.0, 5.0, 6.0, 5.0, 3.0, 2.0, 7.0, 2.0, 6.0, 4.0, 1.0, 1.0, 1.0, 7.0, 2.0, 1.0, 3.0, 3.0, 6.0, 5.0, 5.0, 3.0, 2.0, 9.0, 4.0, 4.0, 3.0, 2.0, 5.0, 4.0, 3.0, 4.0, 5.0, 2.0, 7.0, 1.0, 1.0, 3.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 9.0, 2.0, 2.0, 3.0, 2.0, 3.0, 4.0, 4.0, 4.0, 3.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 2.0, 8.0, 2.0, 2.0, 3.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 3.0, 1.0, 1.0, 2.0, 7.0, 1.0, 2.0, 4.0, 4.0, 4.0, 4.0, 5.0, 4.0, 3.0, 3.0, 3.0, 3.0, 2.0, 2.0, 1.0, 6.0, 1.0, 3.0, 1.0, 2.0, 3.0, 4.0, 2.0, 3.0, 5.0, 2.0, 3.0, 2.0, 7.0, 7.0, 8.0, 1.0, 1.0, 1.0, 5.0, 7.0, 2.0, 7.0, 2.0, 6.0, 6.0, 5.0, 2.0, 1.0, 3.0, 1.0, 2.0, 5.0, 9.0, 5.0, 4.0, 6.0, 4.0, 5.0, 6.0, 5.0, 5.0, 3.0, 3.0, 5.0, 5.0, 5.0, 8.0, 5.0, 2.0, 1.0, 6.0, 8.0, 9.0, 7.0, 4.0, 3.0, 3.0, 2.0, 3.0, 2.0, 3.0, 8.0, 3.0, 3.0, 3.0, 3.0, 2.0, 2.0, 3.0, 1.0, 7.0, 1.0, 9.0, 1.0, 1.0, 2.0, 1.0, 2.0, 4.0, 2.0, 3.0, 2.0, 3.0, 4.0, 4.0, 5.0, 4.0, 3.0, 9.0, 4.0, 4.0, 3.0, 4.0, 2.0, 2.0, 1.0, 9.0, 7.0, 6.0, 9.0, 8.0, 9.0, 8.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 4.0, 4.0, 5.0, 7.0, 5.0, 4.0, 4.0, 5.0, 7.0, 5.0, 6.0, 2.0, 1.0, 3.0, 1.0, 3.0, 1.0, 3.0, 5.0, 1.0, 1.0, 4.0, 1.0, 4.0, 2.0, 2.0, 5.0, 4.0, 5.0, 5.0, 4.0, 4.0, 3.0, 9.0, 9.0, 9.0])

# Perform the Kruskal-Wallis H test
stat, p = kruskal(opening_values, middle_values, end_values)

# Set the significance level, e.g., 0.05
alpha = 0.05

# Check if the medians are different
if p < alpha:
    print("The medians of the CoP distributions between stages are significantly different.")
else:
    print("The medians of the CoP distributions between stages are not significantly different.")
